# .circleci/config.yml

version: 2.1
orbs:
  node: circleci/node@5
jobs:

################      BUILD     ######################
  dependencies_install:
    executor: node/default
    steps:
      - checkout
      - run: echo "on installe les dépendances de l'application"*

  code_analysing:
    executor: node/default
    steps:
      - checkout
      - run: echo "on analyse le code pour voir s'il n'y a pas d'erreurs de syntaxe par exemple"

  cleaning_packaging:
    executor: node/default
    steps:
      - checkout
      - run: echo "on nettoie tous les fichiers inutiles ou qui ont été générés avec le build précédent puis on rassemble toutes les dépendances nécéssaires au building de l'application"

  ###################     TESTS     ##############################
  unit_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests unitaires"

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests d'intégration"

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests de régression"

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests de performance"

  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests de sécurité"

  access_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests d'accessibilité"

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on effectue les tests de compatibilité"

  ########################      DEPLOIEMENT     ##############################
  
  preparing_deploying_environment:
    executor: node/default
    steps:
      - checkout
      - run: echo "on prépare l'environnement de déploiement"

  application_deployement:
    executor: node/default
    steps:
      - checkout
      - run: echo "on prépare l'application pour le déploiement"

  verification_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on fait tes dests de vérification pour se préparer au déploiement"

  functionning_validation_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on valide si les fonctionnalités répondent bien aux attendus"

  charge_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "on vérifie le fonctionnement de l'application sous une certaine charge de tests"

  deploy_dev:
    executor: node/default
    steps:
      - checkout
      - run: echo "on déploie l'application dans l'environnement de développement"

  deploy_prod:
    executor: node/default
    steps:
      - checkout
      - run: echo "on déploie l'application dans l'environnement de production"

  deploy_release:
    executor: node/default
    steps:
      - checkout
      - run: echo "on déploie l'application dans l'environnement d'intégration"

  monitoring:
    executor: node/default
    steps:
      - checkout
      - run: echo "on lance la surveillance continue"

###################################################################
workflows:
  build-test-deploy:
    jobs:
      ######      BUILDING DE L'APPLICATION     ######

      # peu importe l'environnement ou l'on évolue, notre application a besoin d'être build pour effectuer les tests et le déploiement
      
      - dependencies_install

      - code_analysing

      - cleaning_packaging


      ######      TESTS SUR L'APPLICATION     ########

      # les tests-unitaires servent à tester le code "par petits bouts". Ainsi, on ne va faire les test unitaires que sur les environnements offrant de nouvelles fonctionnalités comme les branches de developpement, d'intégration de fonctionnalité et de correctif. Si, unitairement, toutes les fonctionnalités fonctionnent alors on va pouvoir tester si elles s'intègrent bien à notre code principal. On peut se contenter d'ignorer la branche master.
      - unit_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              ignore:
                - master

      # les test d'intégration sont la pour vérifier que toutes nos petites fonctionnalités unitairement testées s'intègret bien dans le code principal contenu dans la branche master. Comme le nom l'indique on va tester si tout s'intègre bien, on va faire ces tests dans la branche d'intégration mais aussi dans la branche principale. Il est inutile de require les test unitaires    
      - integration_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              only:
                - /^release\/.*$/
                - master


      # les tests de régression sont la pour vérifier que les nouvelles fonctionnalités n'apportent pas de nouveaux bugs ou de régressions de code. Pour être sur de n'avoir aucune régression, on va tester dans toutes les branches. Il est important de ne pas régresser au niveau du code cela pourait entrainer d'autres problèmes et vulnérabilités
      - regression_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging

      # les tests de performance servent à évaluer la performance d'une application en conditions réelles donc on va pouvoir tester sur les branches qui imitent ou sont en conditions réelles comme master, release et develop
      - performance_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              only:
                - master
                - develop
                - /^release\/.*$/

      # les tests de sécurité sont effectués sur toutes les branches pour détecter les potentielles vulnérabilités
      - security_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging

      # avec les tests de compatibilité on va tester si par exemple mon application est compatible avec tel type d'écran ou tel type de système d'exploitation. On va faire ces tests sur develop et master car develop simule les conditions d'utilisateurs réels et car master est la branche de production pour les utilisateurs finaux
      - compatibility_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              only:
                - master
                - develop

      # les tests d'accessibilité servent à vérifier si notre application est bien accessible pour les personnes en situation de handicap. On va généralement tester sur master et develop pour les mêmes raisons que les test de compatibilité
      - access_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              only:
                - master
                - develop



      ######      DEPLOIEMENT DE L'APPLICATION      #########
      - preparing_deploying_environment:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - application_deployement:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - verification_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - functionning_validation_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - charge_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/
      # toutes le opérations de déploiement servent à vérifier si l'application peut être déployée donc toutes les branches sont testées sauf les branches de fonctionnalité et de correctifs
      
      # la surveillance en continu permet de savoir le taux d'erreurs engendrées par les utilisateurs, les temps de résonse, etc... Cela permet de surveiller d'activité générale des utilisateurs finaux et de déceler plus rapidement d'éventuels problèmes. Etant donné que l'on surveille l'activité des utilisateurs finaux on va surveiller seulement en environnement de production (master)
      - monitoring:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              only:
                - master

      # le déploiement en développement va s'effectuer sur l'environnement de développement. Bien sur on va s'assurer avant que l'application peut être déployée grace aux tests de déploiement mis require
      - deploy_dev:
          requires:
            - preparing_deploying_environment
            - application_deployement
            - verification_tests
            - functionning_validation_tests
            - charge_tests
          filters:
            branches:
              only:
                - develop

      # le déploiement en production va s'effectuer sur l'environnement de production (master). Bien sur on va s'assurer avant que l'application peut être déployée grace aux tests de déploiement mis require. Déployer en production va donner accès à l'application aux utilisateurs finaux.
      - deploy_prod:
          requires:
            - preparing_deploying_environment
            - application_deployement
            - verification_tests
            - functionning_validation_tests
            - charge_tests
          filters:
            branches:
              only:
                - master

      # le déploiement en intégration va s'effectuer sur l'environnement d'intégration (release). Bien sur on va s'assurer avant que l'application peut être déployée grace aux tests de déploiement mis require
      - deploy_release:
          requires:
            - preparing_deploying_environment
            - application_deployement
            - verification_tests
            - functionning_validation_tests
            - charge_tests
          filters:
            branches:
              only:
                - /^release\/.*$/
      



## CREATION DU GIT-FLOW:

# git remote -v -> avec cette commande je cherche à voir si je suis bien connectée à mon répertoire distant
# git checkout master -> pour etre sure d'etre sur master
# git pull -> au cas ou il y aurait déja des choses sur ma branche distante
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout -b develop -> je crée ma branche de développement à partir de ma branche master puis je me déplace dessus
# je code
# git add --all -> je stage mes modifications
# git commit -m "mon premier commit sur develop" -> je commit mes modifications en ajoutant un message
# git push origin develop -> je push mes modifications sur develop distant
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout -b feature/xxxx -> je crée ma branche de fonctionnalité à partir de ma branche develop puis je me déplace dessus
# je code
# git add --all -> je stage mes modifications
# git commit -m "mon premier commit sur feature" -> je commit mes modifications en ajoutant un message
# git push origin feature/xxxx -> je push mes modifications sur feature/xxxx distant
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout develop -> je retourne sur ma branche develop
# git merge feature/xxxx -> je merge ma branche feature/xxxx a ma branche develop
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout -b release/1.0.0 -> je crée ma branche de release à partir de develop puis je me déplace dessus
# je code
# git add --all -> je stage mes modifications
# git commit -m "mon premier commit sur release" -> je commit mes modifications en ajoutant un message
# git push origin release/1.0.0 -> je push mes modifications sur release/1.0.0 distant
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout master -> je retourne sur ma branche master
# git merge release/1.0.0 -> je marge ma branche release/1.0.0 à ma branche master
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout -b hotfix/probleme -> je crée ma branche hotfix à partir de master puis je me déplace dessus
# je code
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 
# git add --all -> je stage mes modifications
# git commit -m "commit hotfix1" -> je commit mes modifications
# git push origin hotfix/probleme -> je push mes changements sur hotfix/probleme distant
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout master -> je reviens sur ma branche principale
# git merge hotfix/probleme -> je merge ma branche hotfix à mon master
# git status -> si mon statut est clean alors je peux continuer, sinon je dois commit mes modification ou cela pourrait entrainer des problèmes. 

# git checkout develop -> je retourne sur ma branche develop car hotfix doit etre relié à la fois a master et develop
# git merge hotfix/probleme -> je merge ma branche hotfix à mon develop
# git branch -D hotfix/probleme -> enfin je supprime ma branche hotfix/probleme car je n'en aurai plus besoin


