# .circleci/config.yml

version: 2.1
orbs:
  node: circleci/node@5
jobs:
  dependencies_install:
    executor: node/default
    steps:
      - checkout
      - run: echo "installing dependencies"
  code_analysing:
    executor: node/default
    steps:
      - checkout
      - run: echo "code analysing ..."
  cleaning_packaging:
    executor: node/default
    steps:
      - checkout
      - run: echo "cleaning and packaging ..."
  #################################################
  unit_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "unit tests"
  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "integration tests"
  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "regression tests"
  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "performance tests"
  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "security tests"
  access_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "access tests"
  #################################################################
  
  preparing_deploying_environment:
    executor: node/default
    steps:
      - checkout
      - run: echo "preparation of deploying environment"
  application_deployement:
    executor: node/default
    steps:
      - checkout
      - run: echo "application deployement"
  verification_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "verification tests"
  functionning_validation_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "functionning validation tests"
  charge_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "charge tests"
  deploy_dev:
    executor: node/default
    steps:
      - checkout
      - run: echo "Deploying to development environment"
  deploy_prod:
    executor: node/default
    steps:
      - checkout
      - run: echo "Deploying to production environment"
      ###########NE PAS OUBLIER DE FAIRE DEPLOY INTEGRATION
  monitoring:
    executor: node/default
    steps:
      - checkout
      - run: echo "monitoring"

###################################################################
workflows:
  build-test-deploy:
    jobs:
      - dependencies_install
      - code_analysing
      - cleaning_packaging
      ##############
      - unit_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - integration_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - regression_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              ignore:
                - /feature\/\/*/
                - /hotfix\/\/*/

      - performance_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              ignore:
                - /feature\/\/*/
                - /hotfix\/\/*/

      - security_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging

      - access_tests:
          requires:
            - dependencies_install
            - code_analysing
            - cleaning_packaging
          filters:
            branches:
              only:
                -master
      ###############
      - preparing_deploying_environment:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - application_deployement:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - verification_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - functionning_validation_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - charge_tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

      - deploy_dev:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              only:
                - develop

      - deploy_prod:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              only:
                - master

      - monitoring:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - access_tests
          filters:
            branches:
              ignore:
                - /^feature\/.*$/
                - /^hotfix\/.*$/

#lvdfkf

  
#ppoopefpokfpzkf
#ekfpkoegor
#eflelfefelf;el;fel;f


##création du git flow:
git pull -> au cas ou
git status -> voir si c clean
git remote -v -> voir si jss bien connecte
git checkout -b develop -> création de la branche develop
je code
git add . -> je stage mes changes
git commit -m "mon premier commit sur develop" -> je commit mes changes 
git push origin develop -> je push mes modifs sur develop distant
git status -> voir si c clean
git checkout -b feature/popo -> je cree ma branche feature/popo
je code
git add . -> je stage mes changes
git commit -m "mon premier commit sur feature" -> je commit mes changes 
git push origin feature/popo -> je push mes modifs sur feature/popo distant


